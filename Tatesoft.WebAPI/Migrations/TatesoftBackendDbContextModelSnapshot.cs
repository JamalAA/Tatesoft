// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Tatesoft.WebAPI.Context;

#nullable disable

namespace Tatesoft.WebAPI.Migrations
{
    [DbContext(typeof(TatesoftBackendDbContext))]
    partial class TatesoftBackendDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TatesoftBE.Entities.Block", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BlockNumber")
                        .HasColumnType("int");

                    b.Property<string>("BlockType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Confidence")
                        .HasColumnType("float");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<int?>("PageId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TextDirection")
                        .HasColumnType("int");

                    b.Property<int>("Width")
                        .HasColumnType("int");

                    b.Property<int>("X")
                        .HasColumnType("int");

                    b.Property<int>("Y")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("PageId");

                    b.ToTable("Blocks");
                });

            modelBuilder.Entity("TatesoftBE.Entities.Character", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BlockId")
                        .HasColumnType("int");

                    b.Property<int>("CharacterNumber")
                        .HasColumnType("int");

                    b.Property<double>("Confidence")
                        .HasColumnType("float");

                    b.Property<string>("Font")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<int?>("LineId")
                        .HasColumnType("int");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<int?>("PageId")
                        .HasColumnType("int");

                    b.Property<int?>("ParagraphId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TextDirection")
                        .HasColumnType("int");

                    b.Property<int>("Width")
                        .HasColumnType("int");

                    b.Property<int?>("WordId")
                        .HasColumnType("int");

                    b.Property<int>("X")
                        .HasColumnType("int");

                    b.Property<int>("Y")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BlockId");

                    b.HasIndex("LineId");

                    b.HasIndex("LocationId");

                    b.HasIndex("PageId");

                    b.HasIndex("ParagraphId");

                    b.HasIndex("WordId");

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("TatesoftBE.Entities.Choice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CharacterId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.ToTable("Choices");
                });

            modelBuilder.Entity("TatesoftBE.Entities.ContentArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Bottom")
                        .HasColumnType("int");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<int>("Left")
                        .HasColumnType("int");

                    b.Property<int>("Right")
                        .HasColumnType("int");

                    b.Property<int>("Top")
                        .HasColumnType("int");

                    b.Property<int>("Units")
                        .HasColumnType("int");

                    b.Property<int>("Width")
                        .HasColumnType("int");

                    b.Property<int>("X")
                        .HasColumnType("int");

                    b.Property<int>("Y")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ContentAreas");
                });

            modelBuilder.Entity("TatesoftBE.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("TatesoftBE.Entities.Line", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BlockId")
                        .HasColumnType("int");

                    b.Property<double>("Confidence")
                        .HasColumnType("float");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<int>("LineNumber")
                        .HasColumnType("int");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<int?>("PageId")
                        .HasColumnType("int");

                    b.Property<int?>("ParagraphId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TextDirection")
                        .HasColumnType("int");

                    b.Property<int>("Width")
                        .HasColumnType("int");

                    b.Property<int>("X")
                        .HasColumnType("int");

                    b.Property<int>("Y")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BlockId");

                    b.HasIndex("LocationId");

                    b.HasIndex("PageId");

                    b.HasIndex("ParagraphId");

                    b.ToTable("Lines");
                });

            modelBuilder.Entity("TatesoftBE.Entities.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Bottom")
                        .HasColumnType("int");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<int>("Left")
                        .HasColumnType("int");

                    b.Property<int>("Right")
                        .HasColumnType("int");

                    b.Property<int>("Top")
                        .HasColumnType("int");

                    b.Property<int>("Units")
                        .HasColumnType("int");

                    b.Property<int>("Width")
                        .HasColumnType("int");

                    b.Property<int>("X")
                        .HasColumnType("int");

                    b.Property<int>("Y")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("TatesoftBE.Entities.Page", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Barcodes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Confidence")
                        .HasColumnType("float");

                    b.Property<int>("ContentAreaId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<int>("PageNumber")
                        .HasColumnType("int");

                    b.Property<int>("Rotation")
                        .HasColumnType("int");

                    b.Property<string>("Tables")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TextDirection")
                        .HasColumnType("int");

                    b.Property<int>("Width")
                        .HasColumnType("int");

                    b.Property<int>("WordCount")
                        .HasColumnType("int");

                    b.Property<int>("X")
                        .HasColumnType("int");

                    b.Property<int>("Y")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContentAreaId");

                    b.HasIndex("LocationId");

                    b.ToTable("Pages");
                });

            modelBuilder.Entity("TatesoftBE.Entities.Paragraph", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BlockId")
                        .HasColumnType("int");

                    b.Property<double>("Confidence")
                        .HasColumnType("float");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<int?>("PageId")
                        .HasColumnType("int");

                    b.Property<int>("ParagraphNumber")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TextDirection")
                        .HasColumnType("int");

                    b.Property<int>("Width")
                        .HasColumnType("int");

                    b.Property<int>("X")
                        .HasColumnType("int");

                    b.Property<int>("Y")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BlockId");

                    b.HasIndex("LocationId");

                    b.HasIndex("PageId");

                    b.ToTable("Paragraphs");
                });

            modelBuilder.Entity("TatesoftBE.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TatesoftBE.Entities.Word", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BlockId")
                        .HasColumnType("int");

                    b.Property<double>("Confidence")
                        .HasColumnType("float");

                    b.Property<string>("Font")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<int?>("LineId")
                        .HasColumnType("int");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<int?>("PageId")
                        .HasColumnType("int");

                    b.Property<int?>("ParagraphId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TextDirection")
                        .HasColumnType("int");

                    b.Property<int>("Width")
                        .HasColumnType("int");

                    b.Property<int>("WordNumber")
                        .HasColumnType("int");

                    b.Property<int>("X")
                        .HasColumnType("int");

                    b.Property<int>("Y")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BlockId");

                    b.HasIndex("LineId");

                    b.HasIndex("LocationId");

                    b.HasIndex("PageId");

                    b.HasIndex("ParagraphId");

                    b.ToTable("Words");
                });

            modelBuilder.Entity("TatesoftBE.Entities.Block", b =>
                {
                    b.HasOne("TatesoftBE.Entities.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TatesoftBE.Entities.Page", null)
                        .WithMany("Blocks")
                        .HasForeignKey("PageId");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("TatesoftBE.Entities.Character", b =>
                {
                    b.HasOne("TatesoftBE.Entities.Block", null)
                        .WithMany("Characters")
                        .HasForeignKey("BlockId");

                    b.HasOne("TatesoftBE.Entities.Line", null)
                        .WithMany("Characters")
                        .HasForeignKey("LineId");

                    b.HasOne("TatesoftBE.Entities.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TatesoftBE.Entities.Page", null)
                        .WithMany("Characters")
                        .HasForeignKey("PageId");

                    b.HasOne("TatesoftBE.Entities.Paragraph", null)
                        .WithMany("Characters")
                        .HasForeignKey("ParagraphId");

                    b.HasOne("TatesoftBE.Entities.Word", null)
                        .WithMany("Characters")
                        .HasForeignKey("WordId");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("TatesoftBE.Entities.Choice", b =>
                {
                    b.HasOne("TatesoftBE.Entities.Character", null)
                        .WithMany("Choices")
                        .HasForeignKey("CharacterId");
                });

            modelBuilder.Entity("TatesoftBE.Entities.Line", b =>
                {
                    b.HasOne("TatesoftBE.Entities.Block", null)
                        .WithMany("Lines")
                        .HasForeignKey("BlockId");

                    b.HasOne("TatesoftBE.Entities.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TatesoftBE.Entities.Page", null)
                        .WithMany("Lines")
                        .HasForeignKey("PageId");

                    b.HasOne("TatesoftBE.Entities.Paragraph", null)
                        .WithMany("Lines")
                        .HasForeignKey("ParagraphId");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("TatesoftBE.Entities.Page", b =>
                {
                    b.HasOne("TatesoftBE.Entities.ContentArea", "ContentArea")
                        .WithMany()
                        .HasForeignKey("ContentAreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TatesoftBE.Entities.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContentArea");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("TatesoftBE.Entities.Paragraph", b =>
                {
                    b.HasOne("TatesoftBE.Entities.Block", null)
                        .WithMany("Paragraphs")
                        .HasForeignKey("BlockId");

                    b.HasOne("TatesoftBE.Entities.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TatesoftBE.Entities.Page", null)
                        .WithMany("Paragraphs")
                        .HasForeignKey("PageId");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("TatesoftBE.Entities.Word", b =>
                {
                    b.HasOne("TatesoftBE.Entities.Block", null)
                        .WithMany("Words")
                        .HasForeignKey("BlockId");

                    b.HasOne("TatesoftBE.Entities.Line", null)
                        .WithMany("Words")
                        .HasForeignKey("LineId");

                    b.HasOne("TatesoftBE.Entities.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TatesoftBE.Entities.Page", null)
                        .WithMany("Words")
                        .HasForeignKey("PageId");

                    b.HasOne("TatesoftBE.Entities.Paragraph", null)
                        .WithMany("Words")
                        .HasForeignKey("ParagraphId");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("TatesoftBE.Entities.Block", b =>
                {
                    b.Navigation("Characters");

                    b.Navigation("Lines");

                    b.Navigation("Paragraphs");

                    b.Navigation("Words");
                });

            modelBuilder.Entity("TatesoftBE.Entities.Character", b =>
                {
                    b.Navigation("Choices");
                });

            modelBuilder.Entity("TatesoftBE.Entities.Line", b =>
                {
                    b.Navigation("Characters");

                    b.Navigation("Words");
                });

            modelBuilder.Entity("TatesoftBE.Entities.Page", b =>
                {
                    b.Navigation("Blocks");

                    b.Navigation("Characters");

                    b.Navigation("Lines");

                    b.Navigation("Paragraphs");

                    b.Navigation("Words");
                });

            modelBuilder.Entity("TatesoftBE.Entities.Paragraph", b =>
                {
                    b.Navigation("Characters");

                    b.Navigation("Lines");

                    b.Navigation("Words");
                });

            modelBuilder.Entity("TatesoftBE.Entities.Word", b =>
                {
                    b.Navigation("Characters");
                });
#pragma warning restore 612, 618
        }
    }
}
